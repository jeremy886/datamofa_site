<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Mofa - Magic in Data</title><link>http://www.datamofa.club/</link><description>Learning and Teaching Big Data</description><atom:link href="http://www.datamofa.club/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 27 Aug 2017 11:51:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Research Project 1 for Data Visualization</title><link>http://www.datamofa.club/posts/research-project-1-for-data-visualization/</link><dc:creator>Jeremy Chen</dc:creator><description>&lt;div&gt;&lt;div class="section" id="step-1-selection-of-data-set"&gt;
&lt;h2&gt;Step 1: Selection of Data Set&lt;/h2&gt;
&lt;p&gt;The data set is aggregated by the Australian Burea of Statistics from the 2016 census.&lt;/p&gt;
&lt;div class="section" id="source"&gt;
&lt;h3&gt;Source&lt;/h3&gt;
&lt;p&gt;Source of the data set: &lt;a class="reference external" href="https://datapacks.censusdata.abs.gov.au/datapacks/"&gt;the Australian Bureau of Statistics website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to download the files: &lt;a class="reference external" href="http://www.censusdata.abs.gov.au/CensusOutput/copsubdatapacks.nsf/All%20docs%20by%20catNo/2016_GCP_POA_for_Vic/%24File/2016_GCP_POA_for_Vic_short-header.zip?OpenElement&amp;amp;key=ded92a6f-4e19-ead5-9518-f22966129223"&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-topic-of-interest"&gt;
&lt;h2&gt;Step 2: Topic of Interest&lt;/h2&gt;
&lt;p&gt;Income, Gender and Residence&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Is Australian weekly income associated with sex?&lt;/li&gt;
&lt;li&gt;Is Australian weekly income associated with the postal code?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-codebook"&gt;
&lt;h2&gt;Step 3: Codebook&lt;/h2&gt;
&lt;p&gt;The Australian Bureau of Statistics (ABS) uses filename, sex and ages to differentiate data and this creates a unique way of storing data.&lt;/p&gt;
&lt;p&gt;After checking the meta files, I know income records are stored in these three files:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2016Census_G17A_VIC_POA.csv&lt;/li&gt;
&lt;li&gt;2016Census_G17B_VIC_POA.csv&lt;/li&gt;
&lt;li&gt;2016Census_G17C_VIC_POA.csv&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="code"&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;div class="section" id="poa-code-2016-postal-areas-poa"&gt;
&lt;h4&gt;POA_CODE_2016: Postal Areas (POA)&lt;/h4&gt;
&lt;p&gt;It is recorded like POA3000. 3000 is the postal code. All postal code in Victoria, Australia has 4 digits and starts with 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="income-per-sex-per-age"&gt;
&lt;h4&gt;Income per Sex Per Age&lt;/h4&gt;
&lt;p&gt;Sex is denoated by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;M for Male,&lt;/li&gt;
&lt;li&gt;F for Female,&lt;/li&gt;
&lt;li&gt;P for Persons (all sexes).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ages are grouped in:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;15-19: 15_19_yrs&lt;/li&gt;
&lt;li&gt;20-24: 20_24_yrs&lt;/li&gt;
&lt;li&gt;25-34: 25_34_yrs&lt;/li&gt;
&lt;li&gt;35-44: 35_44_yrs&lt;/li&gt;
&lt;li&gt;45-54: 45_54_yrs&lt;/li&gt;
&lt;li&gt;55-64: 55_64_yrs&lt;/li&gt;
&lt;li&gt;65-74: 65_74_yrs&lt;/li&gt;
&lt;li&gt;75-84: 75_84_yrs&lt;/li&gt;
&lt;li&gt;85 and over: 85_yrs_ovr or 85ov&lt;/li&gt;
&lt;li&gt;Total: Tot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Weekly Income are denoated by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Negative/Nil income: Neg_Nil_income&lt;/li&gt;
&lt;li&gt;$1-$149: 1_149&lt;/li&gt;
&lt;li&gt;$150-$299: 150_299&lt;/li&gt;
&lt;li&gt;$300-$399: 300_399&lt;/li&gt;
&lt;li&gt;$400-$499: 400_499&lt;/li&gt;
&lt;li&gt;$500-$649: 500_649&lt;/li&gt;
&lt;li&gt;$650-$799: 650_799&lt;/li&gt;
&lt;li&gt;$800-$999: 800_999&lt;/li&gt;
&lt;li&gt;$1,000-$1,249: 1000_1249&lt;/li&gt;
&lt;li&gt;$1,250-$1,499: 1250_1499&lt;/li&gt;
&lt;li&gt;$1,500-$1,749: 1500_1749&lt;/li&gt;
&lt;li&gt;$1,750-$1,999: 1750_1999&lt;/li&gt;
&lt;li&gt;$2,000-$2,999: 2000_2999&lt;/li&gt;
&lt;li&gt;$3,000 or more: 3000_more&lt;/li&gt;
&lt;li&gt;Personal income not stated: PI_NS_ns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore:&lt;/p&gt;
&lt;p&gt;F_300_399_Tot represents:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Female&lt;/li&gt;
&lt;li&gt;Weekly income between 300 and 399&lt;/li&gt;
&lt;li&gt;Across all age groups (total)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P_PI_NS_ns_25_34_yrs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Persons (male, female or others)&lt;/li&gt;
&lt;li&gt;Personal Income not stated&lt;/li&gt;
&lt;li&gt;Age between 25 to 34&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="literature-review"&gt;
&lt;h3&gt;Literature Review&lt;/h3&gt;
&lt;p&gt;Search by keywords: gender income inequality&lt;/p&gt;
&lt;p&gt;Data from the 1976 Australian census, which allow some assessment of how worker characteristics and the sex-typing of jobs affect the lower incomes of women, lead to the general conclusion that, while direct wage discrimination may have been virtually eliminated, occupational segregation by gender, discontinuous career patterns and part-time employment continue to depress the earnings of women.&lt;/p&gt;
&lt;p&gt;Citation:&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;F. L. Jones&lt;/cite&gt;; Sources of Gender Inequality in Income: What the Australian Census Says, Social Forces, Volume 62, Issue 1, 1 September 1983, Pages 134â€“152, &lt;a class="reference external" href="https://doi.org/10.1093/sf/62.1.134"&gt;https://doi.org/10.1093/sf/62.1.134&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Search by keywords: income residence OR income postal (zip) code&lt;/p&gt;
&lt;p&gt;For income and residence, probably because this type of data is collected directly so I cannot really find any paper talking about this. Most people probably treat the association of income and residence as common sense. I am interested in examining it by statistical measure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hypothesis"&gt;
&lt;h3&gt;Hypothesis&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Australian Females earn significant less weekly than their male counterparts.&lt;/li&gt;
&lt;li&gt;Australians' weekly income is linked to where they live.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://www.datamofa.club/posts/research-project-1-for-data-visualization/</guid><pubDate>Sun, 27 Aug 2017 11:46:31 GMT</pubDate></item><item><title>My journey to Applied Data Science with Python and recent hobbies</title><link>http://www.datamofa.club/posts/my-journey-to-applied-data-science-with-python-and-recent-hobbies/</link><dc:creator>Jeremy Chen</dc:creator><description>&lt;div&gt;&lt;div class="section" id="online-course"&gt;
&lt;h2&gt;Online Course&lt;/h2&gt;
&lt;p&gt;I'm doing Applied Data Science courses on Coursera. I finally paid my tuition after Coursera limited assessed participation to only paid users. After successfully completing the first course, I made the jump.&lt;/p&gt;
&lt;p&gt;I was a bit more skillful in the second course. For a start, I passed it with a first try and I also know more ways to get help I need. I have a feeling it's not as "hard" as the first course - Introduction to Data Science in Python (mainly pandas). But it's a false perception. I did spend a lot of time getting my way around knowing stackoverflow, Dash and online documentations, Jupyter notebook and good books/videos on Safarionline.&lt;/p&gt;
&lt;p&gt;My second course, Applied Plotting, Charting &amp;amp; Data Representation in Python, still need my Pandas skill, but the main focus in on evaluation of a good chart, Matplotlib and a little bit of seaborn. I find the introduction to Seaborn very limited and I wish Bokeh was included. We have an assignment where I created a semi-interaction chart, it was a pain to do that in Matplotlib. I believe it will be easier with Bokeh but I haven't learnt it so we will see later.&lt;/p&gt;
&lt;p&gt;At the beginning, I thought talking about chartjunk and how to evaluate charts is a bit airy fairy but later into the course, when I peer-assessed other classmates' work, I noticed that people tended to focus a lot on the programming techniques and still did not take in the advice from the Principles of Information Visualization. Then I realised how important it is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="study-statistics"&gt;
&lt;h2&gt;Study Statistics&lt;/h2&gt;
&lt;p&gt;In this course, I find myself limited by my statistcal knowledge and I barely try to analyse data in that way. So I'm going to catch up now. Also, I'm a bit scared by the next course Applied Machine Learning in Python.&lt;/p&gt;
&lt;p&gt;I find this interesting book on Safarionline, &lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/practical-statistics-for/9781491952955/"&gt;Practical Statistics for Data Scientists&lt;/a&gt;. It seems readable for my level but unfortunately, its code is in R. I plan to converse it and share here: &lt;a class="reference external" href="https://github.com/jeremy886/learn-stats"&gt;https://github.com/jeremy886/learn-stats&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recent-hobbies"&gt;
&lt;h2&gt;Recent hobbies&lt;/h2&gt;
&lt;p&gt;After watching Uncle Bob's Clean Code on Safarionline and Youtube talks and reading many of his blogs, I am tempted to fiddle with Clojure or even Java (I had an two-decade old SCJP certificate). But I don't think a full time high school teacher can handle too many new languages. I better concentrate on Python. But to satisfy my curious mind, I might try Hy wit &lt;a class="reference external" href="https://mitpress.mit.edu/sicp/"&gt;SICP&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-interesting-video"&gt;
&lt;h2&gt;An interesting Video&lt;/h2&gt;
&lt;p&gt;"The Programming Language Called Classical Chinese" by David Branner&lt;/p&gt;
&lt;div class="youtube-video align-center"&gt;
&lt;iframe width="425" height="344" src="https://www.youtube.com/embed/vBhg2p8aAQ0?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>http://www.datamofa.club/posts/my-journey-to-applied-data-science-with-python-and-recent-hobbies/</guid><pubDate>Wed, 29 Mar 2017 10:25:11 GMT</pubDate></item><item><title>Selected self-paced online courses to study (2017 Q1)</title><link>http://www.datamofa.club/posts/selected-self-paced-online-courses-to-study-2017-q1/</link><dc:creator>Jeremy Chen</dc:creator><description>&lt;div&gt;&lt;p&gt;Here are my choices of courses to study in 2017 Q1 to advance my career in Data Science.&lt;/p&gt;
&lt;div class="section" id="python-programming-skills"&gt;
&lt;h2&gt;Python Programming Skills&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/intermediate-python-programming/9781491954935/video248760.html"&gt;Intermediate Python Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/python-in-a/9781491913833/"&gt;Python in a nutshell, 3rd edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/python-programming-language/9780134217314/"&gt;David Beazley's Python Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python Cookbook&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/making-classes-support/9781491965276/"&gt;https://www.safaribooksonline.com/library/view/making-classes-support/9781491965276/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/implementing-stateful-objects/9781491965283/"&gt;https://www.safaribooksonline.com/library/view/implementing-stateful-objects/9781491965283/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python Internal&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://youtu.be/HVUTjQzESeo"&gt;Allison Kaptur - Bytes in the Machine: Inside the CPython interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pgbovine.net/cpython-internals.htm"&gt;CPython internals: A ten-hour codewalk through the Python interpreter source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="computer-science"&gt;
&lt;h2&gt;Computer Science&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/working-with-algorithms/9781491907818/video182074.html"&gt;Algorithms with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/designing-data-structures/9781491928622/"&gt;Data Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="data-visualization"&gt;
&lt;h2&gt;Data Visualization&lt;/h2&gt;
&lt;p&gt;Video &lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/python-data-visualization/9781787122802"&gt;https://www.safaribooksonline.com/library/view/python-data-visualization/9781787122802&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Book &lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/python-data-visualization/9781784396695/"&gt;https://www.safaribooksonline.com/library/view/python-data-visualization/9781784396695/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="natural-language-processing"&gt;
&lt;h2&gt;Natural Language Processing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/natural-language-text/9781491976487/"&gt;Natural Language Text Processing with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NLTK3 &lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/natural-language-processing/9781787285101/"&gt;https://www.safaribooksonline.com/library/view/natural-language-processing/9781787285101/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="websites"&gt;
&lt;h2&gt;Websites&lt;/h2&gt;
&lt;p&gt;Realpython part 2&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://django.readthedocs.io/en/latest/intro/tutorial01.html"&gt;http://django.readthedocs.io/en/latest/intro/tutorial01.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business"&gt;https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sql"&gt;
&lt;h2&gt;SQL&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/essential-sqlalchemy-2nd/9781491916544/"&gt;https://www.safaribooksonline.com/library/view/essential-sqlalchemy-2nd/9781491916544/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coursera"&gt;
&lt;h2&gt;Coursera&lt;/h2&gt;
&lt;p&gt;I'm waiting for this course to start: &lt;a class="reference external" href="https://www.coursera.org/learn/python-plotting"&gt;Applied Plotting, Charting &amp;amp; Data Representation in Python&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-topics"&gt;
&lt;h2&gt;Advanced Topics&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/python-machine-learning/9781787128033/"&gt;Python Machine Learning Projects&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="topics-of-interest"&gt;
&lt;h2&gt;Topics of Interest&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.futurelearn.com/courses/creative-coding/"&gt;Creative Coding (using Processing.py)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Micropython for IoT (ESP8826)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/strata-hadoop/9781491944608/part50.html"&gt;BokehIntro to data visualization with Bokeh - Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.safaribooksonline.com/library/view/strata-hadoop/9781491944608/part51.html"&gt;BokehIntro to data visualization with Bokeh - Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lines-or-less"&gt;
&lt;h2&gt;500 Lines or Less&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://aosabook.org/en/index.html"&gt;500 lines or less&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AsyncIO&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html"&gt;reading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pgbovine.net/python-async-io-walkthrough.htm"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="more-courses"&gt;
&lt;h2&gt;More Courses?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://universe.openai.com/"&gt;https://universe.openai.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>2017Q1</category><category>courses</category><guid>http://www.datamofa.club/posts/selected-self-paced-online-courses-to-study-2017-q1/</guid><pubDate>Mon, 30 Jan 2017 02:53:54 GMT</pubDate></item><item><title>My first pytest experience</title><link>http://www.datamofa.club/posts/my-first-pytest-experience/</link><dc:creator>Jeremy Chen</dc:creator><description>&lt;div&gt;&lt;p&gt;This is my first time with pytest. It was amazing simple (Of course, I ignored all difficult parts).&lt;/p&gt;
&lt;script src="https://gist.github.com/95fe6097d06b5d3eef2f93c3dcff1b36.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre class="literal-block"&gt;
__author__ = 'Jeremy Chen'


def merge_sort(unsorted):

    sorted_ = []
    length = len(unsorted)
    if length == 1:
        sorted_ = unsorted

    elif length == 2:
        left = unsorted[:length//2]
        right = unsorted[length//2:]

        if left[0] &amp;gt;= right[0]:
            sorted_ = right + left
        else:
            sorted_ = left + right

    elif length == 3:
        left_sorted = merge_sort(unsorted[:length//2])
        right_sorted = merge_sort(unsorted[length//2:])

        if left_sorted[0] &amp;lt;= right_sorted[0]:
            sorted_.append(left_sorted[0])
            sorted_.append(right_sorted[0])
            sorted_.append(right_sorted[1])

        elif left_sorted[0] &amp;lt;= right_sorted[1]:
            sorted_.append(right_sorted[0])
            sorted_.append(left_sorted[0])
            sorted_.append(right_sorted[1])
        else:
            sorted_.append(right_sorted[0])
            sorted_.append(right_sorted[1])
            sorted_.append(left_sorted[0])

    elif length &amp;gt;= 4:
        left_sorted = merge_sort(unsorted[:length//2])
        right_sorted = merge_sort(unsorted[length//2:])

        l, r = 0, 0
        for i in range(length):
            if l == len(left_sorted):
                sorted_.append(right_sorted[r])
                r += 1
            elif r == len(right_sorted):
                sorted_.append(left_sorted[l])
                l += 1
            elif left_sorted[l] &amp;lt; right_sorted[r]:
                sorted_.append(left_sorted[l])
                l += 1
            else:
                sorted_.append(right_sorted[r])
                r += 1
    return sorted_



def test_one_num():
    assert merge_sort([1]) == [1]

def test_two_nums():
    assert merge_sort([1, 2]) == [1, 2]
    assert merge_sort([2, 1]) == [1, 2]
    assert merge_sort([4, 3]) == [3, 4]

def test_three_nums():
    assert merge_sort([1, 2, 3]) == [1, 2, 3]
    assert merge_sort([1, 3, 2]) == [1, 2, 3]
    assert merge_sort([2, 1, 3]) == [1, 2, 3]
    assert merge_sort([2, 3, 1]) == [1, 2, 3]
    assert merge_sort([3, 1, 2]) == [1, 2, 3]
    assert merge_sort([3, 2, 1]) == [1, 2, 3]


def test_any_nums():
    assert merge_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
    assert merge_sort([99, 34, 3, -19, -8, 7, 45]) == [-19, -8, 3, 7, 34, 45, 99]

&lt;/pre&gt;
&lt;/noscript&gt;&lt;/div&gt;</description><guid>http://www.datamofa.club/posts/my-first-pytest-experience/</guid><pubDate>Thu, 19 Jan 2017 01:52:13 GMT</pubDate></item><item><title>Start a new adventure into Data Science in 2017</title><link>http://www.datamofa.club/posts/start-a-new-adventure-into-data-science-in-2017/</link><dc:creator>Jeremy Chen</dc:creator><description>&lt;div&gt;&lt;p&gt;It's my holiday so I have some free time at hand to explore things I'm curious.&lt;/p&gt;
&lt;p&gt;I also want to venture out more.&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.datamofa.club/posts/start-a-new-adventure-into-data-science-in-2017/</guid><pubDate>Fri, 13 Jan 2017 06:51:09 GMT</pubDate></item><item><title>Start an adventure into Data Science in 2017</title><link>http://www.datamofa.club/posts/start-an-adventure-into-data-science-in-2017/</link><dc:creator>Jeremy Chen</dc:creator><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><guid>http://www.datamofa.club/posts/start-an-adventure-into-data-science-in-2017/</guid><pubDate>Fri, 13 Jan 2017 06:50:34 GMT</pubDate></item></channel></rss>